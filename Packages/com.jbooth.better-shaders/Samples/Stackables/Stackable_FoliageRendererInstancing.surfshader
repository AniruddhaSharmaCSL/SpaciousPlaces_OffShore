// Add's support for VSP and Foliage Rendering style instancing

BEGIN_CODE

#pragma instancing_options procedural:setupFoliageRenderer forwardadd

#ifdef UNITY_PROCEDURAL_INSTANCING_ENABLED

    struct FRPackedMatrix
    {
        float3 position;    // 12 bytes
        uint3 m01;    // 12 bytes
        uint2 m2;     // 8 bytes (2 free)
    };

    void FRUnpackUInt24AndByte(uint packedValue, out uint value, out float byteValue)
    {
        // Extract the 24-bit uint
        value = packedValue >> 8;

        // Extract the 8-bit value and convert it back to the -1 to 1 range
        byteValue = ((float)(packedValue & 0xFF) - 128.0f) / 127.0f;
    }

    float4x4 FRFastInverse(float4x4 m)
    {
        // inverse transform matrix
        float3x3 w2oRotation;
        w2oRotation[0] = m[1].yzx * m[2].zxy - m[1].zxy * m[2].yzx;
        w2oRotation[1] = m[0].zxy * m[2].yzx - m[0].yzx * m[2].zxy;
        w2oRotation[2] = m[0].yzx * m[1].zxy - m[0].zxy * m[1].yzx;

        float det = dot(m[0].xyz, w2oRotation[0].xyz);
        w2oRotation = transpose(w2oRotation);

        w2oRotation *= rcp(det);

        float3 w2oPosition = mul(w2oRotation, -m._14_24_34);
        m._11_21_31_41 = float4(w2oRotation._11_21_31, 0.0f);
        m._12_22_32_42 = float4(w2oRotation._12_22_32, 0.0f);
        m._13_23_33_43 = float4(w2oRotation._13_23_33, 0.0f);
        m._14_24_34_44 = float4(w2oPosition, 1.0f);
        return m;

    }

    #if defined(SHADER_API_GLCORE) || defined(SHADER_API_D3D11) || defined(SHADER_API_GLES3) || defined(SHADER_API_METAL) || defined(SHADER_API_VULKAN) || defined(SHADER_API_PSSL) || defined(SHADER_API_XBOXONE)
        
        StructuredBuffer<uint> FRVisibleInstances;
        StructuredBuffer<FRPackedMatrix> FRAllMatrices;

    #endif
#endif



void setupFoliageRenderer()
{

#ifdef UNITY_PROCEDURAL_INSTANCING_ENABLED

    #ifdef unity_ObjectToWorld
        #undef unity_ObjectToWorld
    #endif

    #ifdef unity_WorldToObject
        #undef unity_WorldToObject
    #endif

    uint instance_index = unity_InstanceID;
    
    #if UNITY_SINGLE_PASS_STEREO
        instance_index = unity_InstanceID / 2;
    #endif 

    uint packedIndexLOD = FRVisibleInstances[instance_index];
    uint index;
    float crossfade;
    FRUnpackUInt24AndByte(packedIndexLOD, index, crossfade);
    FRPackedMatrix t = FRAllMatrices[index.x];
    float4x4 mtx = 0;
    
    mtx[0][0] = f16tof32((t.m01.x >> 16) & 0xFFFF);
    mtx[0][1] = f16tof32(t.m01.x & 0xFFFF);
    mtx[0][2] = f16tof32((t.m01.y >> 16) & 0xFFFF);
    mtx[1][0] = f16tof32(t.m01.y & 0xFFFF);
    mtx[1][1] = f16tof32((t.m01.z >> 16) & 0xFFFF);
    mtx[1][2] = f16tof32(t.m01.z & 0xFFFF);
    mtx[2][0] = f16tof32((t.m2.x >> 16) & 0xFFFF);
    mtx[2][1] = f16tof32(t.m2.x & 0xFFFF);
    mtx[2][2] = f16tof32(t.m2.y & 0xFFFF);

    mtx[0][3] = t.position.x;
    mtx[1][3] = t.position.y;
    mtx[2][3] = t.position.z;
    mtx[3][3] = 1;

    unity_ObjectToWorld = mtx;
    unity_WorldToObject = FRFastInverse(mtx);

    unity_LODFade.x = crossfade;
    unity_LODFade.y = 1.0 - clamp(round(crossfade * 16) / 16, 0.0625, 1);

    #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(SHADERPASS_CS_HLSL)
        unity_MatrixPreviousM = unity_ObjectToWorld;
        unity_MatrixPreviousMI = unity_WorldToObject;
    #endif
    
#endif

}


