//© Dicewrench Designs LLC 2024
//Licensed for use in 'Music Visualizer' App
//All Rights Reserved
//Last Owned by: Allen White (allen@dicewrenchdesigns.com)

BEGIN_OPTIONS
	Stackable "False"
	Alpha "Blend"
END_OPTIONS

BEGIN_PROPERTIES
	[Header(Bubble Color Settings)]
	[KeywordEnum(ViewDir,TriPlanar)] _UVMode("UV Mode", float) = 0.0
	[KeywordEnum(Color, Gradient)] _ColorMode("Color Mode", float) = 0.0
	
	[HDR] _Color ("Main Color", Color) = (0, 1, 0, 1)
	[HDR] _ColorTwo("Edge Color", Color) = (1,0,0,1)

	//grad mode
	[HideUnless(_COLORMODE_GRADIENT)]
	[NoScaleOffset] _GradTexture("Gradient Texture", 2D) = "grey" {}

	//tri-planar
	[HideUnless(_UVMODE_TRIPLANAR)]
	_PlanarMap("Planar Map", 2D) = "white" {}
	[HideUnless(_UVMODE_TRIPLANAR)]
	_PlanarMix("Channel Mix", Vector) = (1,0,0,0)
	[HideUnless(_UVMODE_TRIPLANAR)]
	_XScroll ("X Scroll", float) = 0.3
	[HideUnless(_UVMODE_TRIPLANAR)]
	_YScroll ("Y SCroll", float) = -0.1
	[HideUnless(_UVMODE_TRIPLANAR)]
	_MapIntensity("Map Intensity", Range(0,1)) = 0.2

	[Header(Ramp Settings)]
	_RampPow("Pow", float) = 1.0
	_RampBoost("Boost", float) = 2.0
END_PROPERTIES

BEGIN_CBUFFER
	half4 _Color, _ColorTwo;
	uniform float4 _PlanarMap_ST;
	half4 _PlanarMix;
	half _RampPow, _RampBoost;
	half _XScroll, _YScroll;
	half _MapIntensity;
END_CBUFFER

BEGIN_DEFINES
	#ifndef _HAS_FUNC
		#include "DWD_ShaderFunctions.cginc" 
		#define _HAS_FUNC 1
	#endif
	#pragma multi_compile _UVMODE_VIEWDIR _UVMODE_TRIPLANAR
	#pragma multi_compile _COLORMODE_COLOR _COLORMODE_GRADIENT
	#if _URP
		#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
		#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
	#endif
END_DEFINES


BEGIN_CODE

	#if _UVMODE_TRIPLANAR
		TEXTURE2D(_PlanarMap);
		SAMPLER(sampler_PlanarMap);
	#endif

	#if _COLORMODE_GRADIENT
		TEXTURE2D(_GradTexture);
		SAMPLER(sampler_GradTexture);
	#endif

	half LightDot(float3 lightDir, half3 surfaceNormal, ShaderData d)
	{
		float3 normalDirection = TangentToWorldSpace(d, surfaceNormal);
		return dot(normalDirection, lightDir);
	}

	void ModifyVertex(inout VertexData v, inout ExtraV2F d)
	{
		#if _UVMODE_TRIPLANAR
			float t = _Time.x;
			float2 scroll = float2(t * _XScroll, t * _YScroll) + _PlanarMap_ST.zw;
			v.texcoord0.xy = v.vertex.xy * _PlanarMap_ST.xy + scroll;
			v.texcoord0.zw = v.vertex.zx * _PlanarMap_ST.xy + scroll;
			v.texcoord1.xy = v.vertex.yz * _PlanarMap_ST.xy + scroll;
			v.texcoord1.z = abs(dot(float3(0,1,0), v.normal.y));
			v.texcoord1.w = abs(dot(float3(1,0,0), v.normal.x));
		#endif
	}

	void SurfaceFunction(inout Surface o, ShaderData d)
	{
		half ramp = 1.0;
		half4 outputColor = _Color;

		ramp = Rim(o.Normal, d.tangentSpaceViewDir);
		ramp = saturate(pow(ramp, _RampPow) * _RampBoost);
		outputColor = lerp(_Color, _ColorTwo, ramp);

		#if _UVMODE_TRIPLANAR
			float3 lightDir;
			float3 lightColor;
			GetSun(lightDir, lightColor);
			half lightWrap = LightDot(lightDir, o.Normal, d) * 0.5 + 0.5;

			half triOne = GetMix(SAMPLE_TEXTURE2D(_PlanarMap, sampler_PlanarMap, d.texcoord0.xy), _PlanarMix);
			half triTwo = GetMix(SAMPLE_TEXTURE2D(_PlanarMap, sampler_PlanarMap, d.texcoord0.zw), _PlanarMix);
			half triThree = GetMix(SAMPLE_TEXTURE2D(_PlanarMap, sampler_PlanarMap, d.texcoord1.xy), _PlanarMix);
			ramp = lightWrap + (lerp(lerp(triOne, triTwo, d.texcoord1.z), triThree, d.texcoord1.w) * _MapIntensity);
			ramp = saturate(pow(ramp, _RampPow) * _RampBoost);
		#endif

		#if _COLORMODE_GRADIENT
			outputColor *= SAMPLE_TEXTURE2D(_GradTexture, sampler_GradTexture, saturate(ramp.xx));
		#endif

		o.Albedo = outputColor.rgb;
		o.Alpha = outputColor.a;
	}

END_CODE

